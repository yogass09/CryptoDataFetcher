dir.create("FRED", showWarnings = FALSE)
# Set today's date as the 'to' parameter
to_date <- Sys.Date()
# Initialize an empty list to store FRED data
fred_data_list <- list()
library(quantmod)
# Iterate over each row
for (i in 1:nrow(FredDataKey)) {
# Get code and indicator description
code <- as.character(FredDataKey$Code[i])
indicator_description <- as.character(FredDataKey$Indicator.Description[i])
# Fetch data from FRED
fred_data <- getSymbols(code, src = "FRED", auto.assign = FALSE)
# Convert xts object to data frame
fred_data_df <- as.data.frame(fred_data)
# Add date column
fred_data_df$datestamp <- rownames(fred_data_df)
# Reorder columns to have the date column first
fred_data_df <- fred_data_df[, c("datestamp", setdiff(colnames(fred_data_df), "datestamp"))]
# Create file name
file_name <- paste0("FRED/", indicator_description, ".csv")
# Save data as CSV
write.csv(fred_data_df, file_name, row.names = FALSE)
cat("Saved data for", indicator_description, "as", file_name, "\n")
}
getSymbols.FRED(Symbols = all(TRUE),src='fred')
getSymbols.FRED(Symbols = all(FALSE),src='fred')
getSymbols.FRED(Symbols = all(),src='fred')
getSymbols.FRED(Symbols,src='fred')
getSymbols.FRED(Symbols(),src='fred')
getSymbols.FRED(Symbols=FredDataKey$Code,src='fred')
getSymbols(Symbols=FredDataKey$Code,src='fred')
getSymbols.FRED(Symbols=FredDataKey$Code,env = .global)
getSymbols.FRED(Symbols=FredDataKey$Code,env = .GlobalEnv)
getSymbols.csv(Symbols=FredDataKey$Code,env = .GlobalEnv)
getSymbols.csv(Symbols=FredDataKey$Code,env = .GlobalEnv,src="FRED")
getSymbols.FRED(Symbols=FredDataKey$Code,env = .GlobalEnv,src="FRED")
View(FEDFUNDS)
# Set the path to the CSV file
file_path <- 'C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FredDataKey.csv'
# Read the CSV file into a data frame
FredDataKey <- read.csv(file_path)
#Define the directory to store the files
dir.create("FRED", showWarnings = FALSE) # This
library(quantmod)
library(readr)
# Read the CSV file containing FRED codes and descriptions
fred_data <- FredDataKey
# Create a directory named 'FRED' to store the CSV files
dir.create("FRED", showWarnings = FALSE)
# Set today's date as the 'to' parameter
to_date <- Sys.Date()
# Initialize an empty list to store FRED data
fred_data_list <- list()
fred_data_list <- getSymbols.FRED(Symbols="GDP",env = .GlobalEnv,src="FRED")
View(GDP)
# Set the path to the CSV file
file_path <- 'C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FredDataKey.csv'
# Read the CSV file into a data frame
FredDataKey <- read.csv(file_path)
#Define the directory to store the files
dir.create("FRED", showWarnings = FALSE) # This
library(quantmod)
library(readr)
# Read the CSV file containing FRED codes and descriptions
fred_data <- FredDataKey
# Create a directory named 'FRED' to store the CSV files
dir.create("FRED", showWarnings = FALSE)
# Set today's date as the 'to' parameter
to_date <- Sys.Date()
fred_data_list <- getSymbols.FRED(Symbols="GDP",env = .GlobalEnv,src="FRED")
# Set the path to the CSV file
file_path <- 'C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FredDataKey.csv'
# Read the CSV file into a data frame
FredDataKey <- read.csv(file_path)
#Define the directory to store the files
dir.create("FRED", showWarnings = FALSE) # This
library(quantmod)
library(readr)
# Read the CSV file containing FRED codes and descriptions
fred_data <- FredDataKey
# Create a directory named 'FRED' to store the CSV files
dir.create("FRED", showWarnings = FALSE)
# Set today's date as the 'to' parameter
to_date <- Sys.Date()
fred_data_list <- getSymbols.FRED(Symbols="GDP",env = .GlobalEnv,src="FRED")
setwd("~/GitHub/CryptoDataFetcher/FRED")
# Set the path to the CSV file
file_path <- 'C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FredDataKey.csv'
# Read the CSV file into a data frame
FredDataKey <- read.csv(file_path)
# Set the path to the CSV file
file_path <- 'C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FredDataKey.csv'
# Read the CSV file into a data frame
FredDataKey <- read.csv(file_path)
#Define the directory to store the files
dir.create("FRED", showWarnings = FALSE) # This
library(quantmod)
library(readr)
# Read the CSV file containing FRED codes and descriptions
fred_data <- FredDataKey
# Create a directory named 'FRED' to store the CSV files
dir.create("FRED", showWarnings = FALSE)
# Set today's date as the 'to' parameter
to_date <- Sys.Date()
fred_data_list <- getSymbols.FRED(Symbols="GDP",env = .GlobalEnv,src="FRED")
View(GDP)
# Fetch FRED data and assign it to a list
fred_data_list <- getSymbols.FRED(Symbols = FredDataKey$code, env = .GlobalEnv, src = "FRED")
# Loop through each data series in fred_data_list
for (indicator_desc in names(fred_data_list)) {
# Get the data for the current indicator description
data <- fred_data_list[[indicator_desc]]
# Define the file name for the CSV
file_name <- paste0("FRED/", gsub("[[:punct:] ]", "_", indicator_desc), ".csv")
# Save the data to a CSV file
write.csv(data, file_name, row.names = TRUE)
}
# Fetch FRED data and assign it to a list
fred_data_list <- getSymbols.FRED(Symbols = FredDataKey$code, env = .GlobalEnv, src = "FRED")
# Loop through each data series in fred_data_list
for (indicator_desc in names(fred_data_list)) {
# Get the data for the current indicator description
data <- fred_data_list[[indicator_desc]]
# Define the file name for the CSV
file_name <- paste0("FRED/", gsub("[[:punct:] ]", "_", indicator_desc), ".csv")
# Save the data to a CSV file
write.csv(data, file_name, row.names = TRUE)
}
# Set the path to the CSV file
file_path <- 'C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FredDataKey.csv'
# Read the CSV file into a data frame
FredDataKey <- read.csv(file_path)
#Define the directory to store the files
dir.create("FRED", showWarnings = FALSE) # This
library(quantmod)
library(readr)
# Read the CSV file containing FRED codes and descriptions
fred_data <- FredDataKey
# Create a directory named 'FRED' to store the CSV files
#dir.create("FRED", showWarnings = FALSE)
# Set today's date as the 'to' parameter
to_date <- Sys.Date()
# Fetch FRED data and assign it to a list
fred_data_list <- getSymbols.FRED(Symbols = FredDataKey$code, env = .GlobalEnv, src = "FRED")
# Fetch FRED data and assign it to a list
getSymbols.FRED(Symbols = FredDataKey$code, env = .GlobalEnv, src = "FRED")
# Set the path to the CSV file
file_path <- 'C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FredDataKey.csv'
# Read the CSV file into a data frame
FredDataKey <- read.csv(file_path)
#Define the directory to store the files
#dir.create("FRED", showWarnings = FALSE) # This
library(quantmod)
library(readr)
# Read the CSV file containing FRED codes and descriptions
FredDataKey
# Create a directory named 'FRED' to store the CSV files
#dir.create("FRED", showWarnings = FALSE)
# Set today's date as the 'to' parameter
to_date <- Sys.Date()
# Fetch FRED data and assign it to a list
getSymbols.FRED(Symbols = FredDataKey$code, env = .GlobalEnv, src = "FRED")
# Set the path to the CSV file
file_path <- 'C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FredDataKey.csv'
# Read the CSV file into a data frame
FredDataKey <- read.csv(file_path)
#Define the directory to store the files
#dir.create("FRED", showWarnings = FALSE) # This
# Set the path to the CSV file
file_path <- 'C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FredDataKey.csv'
# Read the CSV file into a data frame
FredDataKey <- read.csv(file_path)
#Define the directory to store the files
#dir.create("FRED", showWarnings = FALSE) # This
library(quantmod)
library(readr)
# Read the CSV file containing FRED codes and descriptions
FredDataKey
# Create a directory named 'FRED' to store the CSV files
#dir.create("FRED", showWarnings = FALSE)
# Set today's date as the 'to' parameter
to_date <- Sys.Date()
# Fetch FRED data and assign it to a list
getSymbols.FRED(Symbols = FredDataKey$code, env = .GlobalEnv, src = "FRED")
View(FredDataKey)
# Loop through each data series in fred_data_list
for (indicator_desc in names(fred_data_list)) {
# Get the data for the current indicator description
data <- fred_data_list[[indicator_desc]]
# Define the file name for the CSV
file_name <- paste0("FRED/", gsub("[[:punct:] ]", "_", indicator_desc), ".csv")
# Save the data to a CSV file
write.csv(data, file_name, row.names = TRUE)
}
# Set the path to the CSV file
file_path <- 'C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FredDataKey.csv'
# Read the CSV file into a data frame
FredDataKey <- read.csv(file_path)
#Define the directory to store the files
#dir.create("FRED", showWarnings = FALSE) # This
library(quantmod)
library(readr)
# Read the CSV file containing FRED codes and descriptions
FredDataKey
# Create a directory named 'FRED' to store the CSV files
#dir.create("FRED", showWarnings = FALSE)
# Set today's date as the 'to' parameter
to_date <- Sys.Date()
library(quantmod)
library(readr)
# Read the CSV file containing FRED codes and descriptions
FredDataKey
library(quantmod)
library(readr)
# Fetch FRED data and assign it to a list
getSymbols.FRED(Symbols = FredDataKey$code, env = .GlobalEnv, src = "FRED")
getSymbols.FRED(Symbols = fred_data$Code,env = .GlobalEnv)
# Loop through each data series in fred_data
for (i in seq_along(fred_data)) {
# Get the current data series
data_series <- fred_data[[i]]
# Define the file name for the CSV
file_name <- paste0("fred/", gsub("[[:punct:] ]", "_", names(fred_data)[i]), ".csv")
# Save the data series to a CSV file
write.csv(data_series, file_name, row.names = TRUE)
}
# Loop through each data series in fred_data
for (i in seq_along(FredDataKey)) {
# Get the current data series
data_series <- FredDataKey[[i]]
# Define the file name for the CSV
file_name <- paste0("fred/", gsub("[[:punct:] ]", "_", names(FredDataKey)[i]), ".csv")
# Save the data series to a CSV file
write.csv(data_series, file_name, row.names = TRUE)
}
AAA
FredDataKey$Code
library(quantmod)
# Fetch data for all codes in FredDataKey$Code
fred_data_list <- getSymbols.FRED(Symbols = FredDataKey$Code, env = .GlobalEnv)
# Merge all data frames into a single data frame
merged_df <- Reduce(merge, fred_data_list)
# Print the merged data frame
print(merged_df)
# List of names of objects you want to save
object_names <- ls(FredDataKey$code)
# List of names of objects you want to save
object_names <-FredDataKey$code
# List of names of objects you want to save
object_names <-FredDataKey$code
# Loop through each object name
for (name in object_names) {
# Get the object from the global environment
obj <- get(name)
# Save the object to a file
save(obj, file = paste0(name, ".RData"))
}
# List of names of objects you want to save
object_names <-FredDataKey$code
# Loop through each object name
for (name in object_names) {
# Get the object from the global environment
obj <- get(name)
# Save the object to a file
save(obj, file = paste0(name, ".RData"))
}
# List of names of objects you want to save
object_names <- ls()
# Loop through each object name
for (name in object_names) {
# Get the object from the global environment
obj <- get(name)
# Save the object to a file
save(obj, file = paste0(name, ".RData"))
}
setwd("~/GitHub/CryptoDataFetcher/FRED")
# List of names of objects you want to save
object_names <- ls()
# Loop through each object name
for (name in object_names) {
# Get the object from the global environment
obj <- get(name)
# Convert object to data frame if it's not already in that format
if (!is.data.frame(obj)) {
obj <- as.data.frame(obj)
}
# Save the object to a CSV file
write.csv(obj, file = paste0(name, ".csv"), row.names = FALSE)
}
# List of names of objects you want to save
object_names <- ls()
# Loop through each object name
for (name in object_names) {
# Get the object from the global environment
obj <- get(name)
# Convert object to data frame if it's not already in that format
if (!is.data.frame(obj)) {
obj <- as.data.frame(obj)
}
# Ensure that the object has a date index column
if ("Date" %in% names(obj)) {
# If "Date" column exists, set it as the row names
row.names(obj) <- obj$Date
# Drop the "Date" column to avoid duplication in CSV
obj <- obj[, -which(names(obj) == "Date")]
}
# Save the object to a CSV file
write.csv(obj, file = paste0(name, ".csv"))
}
# Specify the directory where you want to save the CSV files
output_dir <- "C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FRED"
# List of names of objects you want to save
object_names <- ls()
# Loop through each object name
for (name in object_names) {
# Get the object from the global environment
obj <- get(name)
# Convert object to data frame if it's not already in that format
if (!is.data.frame(obj)) {
obj <- as.data.frame(obj)
}
# Ensure that the object has a date index column
if ("Date" %in% names(obj)) {
# If "Date" column exists, set it as the row names
row.names(obj) <- obj$Date
# Drop the "Date" column to avoid duplication in CSV
obj <- obj[, -which(names(obj) == "Date")]
}
# Construct the file path for saving the CSV file
file_path <- file.path(output_dir, paste0(name, ".csv"))
# Save the object to a CSV file
write.csv(obj, file = paste0(name, ".csv"))
}
# Specify the directory where you want to save the CSV files
output_dir <- "C:/Users/44776/Documents/GitHub/CryptoDataFetcher/FRED"
# List of names of objects you want to save
object_names <- ls()
# Loop through each object name
for (name in object_names) {
# Get the object from the global environment
obj <- get(name)
# Convert object to data frame if it's not already in that format
if (!is.data.frame(obj)) {
obj <- as.data.frame(obj)
}
# Ensure that the object has a date index column
if ("Date" %in% names(obj)) {
# If "Date" column exists, set it as the row names
row.names(obj) <- obj$Date
# Drop the "Date" column to avoid duplication in CSV
obj <- obj[, -which(names(obj) == "Date")]
}
# Construct the file path for saving the CSV file
file_path <- file.path(output_dir, paste0(name, ".csv"))
# Save the object to a CSV file in the specified directory
write.csv(obj, file = file_path)
}
print("hi")
# Stage 1 - load data and packages: ------------------------------
library(WDI)
library(tidyverse)
WDIsearch(string = "population")
WDIsearch(string = "population",field = "India")
WDIsearch(string = "INDIA",field = "population")
WDIsearch(string = "INDIA",field = population)
WDIsearch(string = "INDIA",field = population)
wdicountry()
WDIcountry(India)
WDIcountry()
# Install and load the WDI package
install.packages("WDI")
library(WDI)
# Specify the countries of interest
countries <- c("US", "GB", "JP", "CN")  # Example: United States, United Kingdom, Japan, China
# Specify the indicators of interest
indicators <- c("NY.GDP.MKTP.CD",     # GDP (current US$)
"FP.CPI.TOTL.ZG",     # Inflation, consumer prices (annual %)
"FR.INR.RINR",        # Interest rate, official (%)
"FM.LBL.BMNY.GD.ZS",  # Broad money (% of GDP)
"GC.DOD.TOTL.GD.ZS",  # General government debt (% of GDP)
"BX.TRF.PWKR.CD.DT",  # Total trade (% of GDP)
"NY.GDP.MKTP.KD.ZG",  # GDP growth (annual %)
"SL.UEM.TOTL.ZS")     # Unemployment, total (% of total labor force) [Note: Available for a limited set of countries]
# Set the time period
start_year <- 2000
end_year <- 2024
# Retrieve the data from the World Bank's World Development Indicators database
wdi_data <- WDI(country = countries,
indicator = indicators,
start = start_year,
end = end_year)
# Install and load the WDI package
install.packages("WDI")
library(WDI)
# Specify the countries of interest
countries <- c("US", "GB", "JP", "CN")  # Example: United States, United Kingdom, Japan, China
# Specify the indicators of interest
indicators <- c("NY.GDP.MKTP.CD",     # GDP (current US$)
"FP.CPI.TOTL.ZG",     # Inflation, consumer prices (annual %)
"FR.INR.RINR",        # Interest rate, official (%)
"FM.LBL.BMNY.GD.ZS",  # Broad money (% of GDP)
"GC.DOD.TOTL.GD.ZS",  # General government debt (% of GDP)
"BX.TRF.PWKR.CD.DT",  # Total trade (% of GDP)
"NY.GDP.MKTP.KD.ZG",  # GDP growth (annual %)
"SL.UEM.TOTL.ZS")     # Unemployment, total (% of total labor force) [Note: Available for a limited set of countries]
# Set the time period
start_year <- 2000
end_year <- 2024
# Retrieve the data from the World Bank's World Development Indicators database
wdi_data <- WDI(country = countries,
indicator = indicators,
start = start_year,
end = end_year)
# View the retrieved data
View(wdi_data)
# Install and load the WDI package
install.packages("WDI")
library(WDI)
# Specify the countries of interest
countries <- c("US", "GB", "JP", "CN")  # Example: United States, United Kingdom, Japan, China
# Specify the indicators of interest
indicators <- c("NY.GDP.MKTP.CD",     # GDP (current US$)
"FP.CPI.TOTL.ZG",     # Inflation, consumer prices (annual %)
"FR.INR.RINR",        # Interest rate, official (%) [Note: This is a proxy; actual interest rate indicators may vary by country]
"FM.LBL.BMNY.GD.ZS",  # Broad money (% of GDP)
"GC.DOD.TOTL.GD.ZS",  # General government debt (% of GDP)
"BX.TRF.PWKR.CD.DT",  # Total trade (% of GDP)
"NY.GDP.MKTP.KD.ZG",  # GDP growth (annual %)
"SL.UEM.TOTL.ZS")     # Unemployment, total (% of total labor force) [Note: Available for a limited set of countries]
# Set the time period (assuming monthly data from January 2010 to December 2020)
start_date <- "2010-01-01"
end_date <- "2020-12-31"
# Retrieve the data from the World Bank's World Development Indicators database
wdi_data <- lapply(indicators, function(indicator) {
WDI(country = countries,
indicator = indicator,
start = start_date,
end = end_date)
})
library(WDI)
# Specify the countries of interest
countries <- c("US", "GB", "JP", "CN")  # Example: United States, United Kingdom, Japan, China
# Specify the indicators of interest
indicators <- c("NY.GDP.MKTP.CD",     # GDP (current US$)
"FP.CPI.TOTL.ZG",     # Inflation, consumer prices (annual %)
"FR.INR.RINR",        # Interest rate, official (%) [Note: This is a proxy; actual interest rate indicators may vary by country]
"FM.LBL.BMNY.GD.ZS",  # Broad money (% of GDP)
"GC.DOD.TOTL.GD.ZS",  # General government debt (% of GDP)
"BX.TRF.PWKR.CD.DT",  # Total trade (% of GDP)
"NY.GDP.MKTP.KD.ZG",  # GDP growth (annual %)
"SL.UEM.TOTL.ZS")     # Unemployment, total (% of total labor force) [Note: Available for a limited set of countries]
# Set the time period (assuming monthly data from January 2010 to December 2020)
start_date <- "2010-01-01"
end_date <- "2020-12-31"
# Retrieve the data from the World Bank's World Development Indicators database
wdi_data <- lapply(indicators, function(indicator) {
WDI(country = countries,
indicator = indicator,
start = start_date,
end = end_date)
})
library(WDI)
# Specify the countries of interest
countries <- c("US", "GB", "JP", "CN")  # Example: United States, United Kingdom, Japan, China
# Specify the indicators of interest
indicators <- c("NY.GDP.MKTP.CD",     # GDP (current US$)
"FP.CPI.TOTL.ZG",     # Inflation, consumer prices (annual %)
"FR.INR.RINR",        # Interest rate, official (%) [Note: This is a proxy; actual interest rate indicators may vary by country]
"FM.LBL.BMNY.GD.ZS",  # Broad money (% of GDP)
"GC.DOD.TOTL.GD.ZS",  # General government debt (% of GDP)
"BX.TRF.PWKR.CD.DT",  # Total trade (% of GDP)
"NY.GDP.MKTP.KD.ZG",  # GDP growth (annual %)
"SL.UEM.TOTL.ZS")     # Unemployment, total (% of total labor force) [Note: Available for a limited set of countries]
# Set the time period (assuming monthly data from January 2010 to December 2020)
start_date <- "2010-01-01"
end_date <- "2020-12-31"
# Retrieve the data from the World Bank's World Development Indicators database
wdi_data <- lapply(indicators, function(indicator) {
WDI(country = countries,
indicator = indicator,
start = start_date,
end = end_date)
})
# Stage 1 - load data and packages: ------------------------------
library(WDI)
library(tidyverse)
# Install and load the WDI package
install.packages("WDI")
library(WDI)
# Specify the countries of interest
countries <- c("US", "GB", "JP", "CN")  # Example: United States, United Kingdom, Japan, China
# Specify the indicators of interest
indicators <- c("NY.GDP.MKTP.CD",     # GDP (current US$)
"FP.CPI.TOTL.ZG",     # Inflation, consumer prices (annual %)
"FR.INR.RINR",        # Interest rate, official (%)
"FM.LBL.BMNY.GD.ZS",  # Broad money (% of GDP)
"GC.DOD.TOTL.GD.ZS",  # General government debt (% of GDP)
"BX.TRF.PWKR.CD.DT",  # Total trade (% of GDP)
"NY.GDP.MKTP.KD.ZG",  # GDP growth (annual %)
"SL.UEM.TOTL.ZS")     # Unemployment, total (% of total labor force) [Note: Available for a limited set of countries]
# Set the time period
start_year <- 2000
end_year <- 2024
# Retrieve the data from the World Bank's World Development Indicators database
wdi_data <- WDI(country = countries,
indicator = indicators,
start = start_year,
end = end_year)
# View the retrieved data
View(wdi_data)
View(wdi_data)
